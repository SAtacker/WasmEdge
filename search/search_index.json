{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Py SDK for WasmEdge Work in progress Motivation Python is a well-known programming language and supports quick development for a variety of domains. WasmEdge has a go language SDK implemented here . This proposal aims to implement a Python ( for the CPython implementation of Python ) SDK using the above implementation as a reference, Details Some rationale around performance- Python has never been intended for performance-critical applications while on the other hand, WasmEdge has different intentions. It is designed to be a lightweight and fast VM for Wasm. The idea behind python is that developers spend more time reading the code. Python SDK should be way easier to use. And as far as performance is considered, all of the code behind this package can be wrapped around the C-API to make it as closer to the native speed as possible. This SDK should be able to provide all the functions present in the C - API of WasmEdge (link given in the appendix). Stuff to look out for: Data-types integrations for all the three python-c-wasm. Safety (no memory access of host from .wasm modules) Potentially it is also possible to wrap around WasmEdge functionalities to support Wasm C API if it doesn't already. The end goal should be to use WasmEdge as a backend and provide an Easy to use SDK over this. Appendix C - API for WasmEdge is already present. - Docs C - API for the CPython implementation of python is quite mature without third-party tools and Boost.Python is also available Examples Misc: I'll probably need help in this to make it as correct as possible if anything seems a bit off. Thanks a lot already :-D Project layout . \u251c\u2500\u2500 Containerfile \u251c\u2500\u2500 coverage.xml \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocks.yml \u251c\u2500\u2500 pywasmedge \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 WasmEdge.h \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 WasmEdge.c \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements-test.txt \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_base.py \u251c\u2500\u2500 VERSION","title":"Home"},{"location":"#welcome-to-py-sdk-for-wasmedge","text":"Work in progress","title":"Welcome to Py SDK for WasmEdge"},{"location":"#motivation","text":"Python is a well-known programming language and supports quick development for a variety of domains. WasmEdge has a go language SDK implemented here . This proposal aims to implement a Python ( for the CPython implementation of Python ) SDK using the above implementation as a reference,","title":"Motivation"},{"location":"#details","text":"Some rationale around performance- Python has never been intended for performance-critical applications while on the other hand, WasmEdge has different intentions. It is designed to be a lightweight and fast VM for Wasm. The idea behind python is that developers spend more time reading the code. Python SDK should be way easier to use. And as far as performance is considered, all of the code behind this package can be wrapped around the C-API to make it as closer to the native speed as possible. This SDK should be able to provide all the functions present in the C - API of WasmEdge (link given in the appendix). Stuff to look out for: Data-types integrations for all the three python-c-wasm. Safety (no memory access of host from .wasm modules) Potentially it is also possible to wrap around WasmEdge functionalities to support Wasm C API if it doesn't already. The end goal should be to use WasmEdge as a backend and provide an Easy to use SDK over this.","title":"Details"},{"location":"#appendix","text":"C - API for WasmEdge is already present. - Docs C - API for the CPython implementation of python is quite mature without third-party tools and Boost.Python is also available Examples","title":"Appendix"},{"location":"#misc","text":"I'll probably need help in this to make it as correct as possible if anything seems a bit off. Thanks a lot already :-D","title":"Misc:"},{"location":"#project-layout","text":". \u251c\u2500\u2500 Containerfile \u251c\u2500\u2500 coverage.xml \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocks.yml \u251c\u2500\u2500 pywasmedge \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 WasmEdge.h \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 WasmEdge.c \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements-test.txt \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_base.py \u251c\u2500\u2500 VERSION","title":"Project layout"},{"location":"HISTORY/","text":"(unreleased) [PySDK] Specify Types of parameters and return values in advance. [Shreyas Atre] Utilize the Type class implemented in python and specify as arguments in run function. https://github.com/WasmEdge/WasmEdge/issues/645 [PySDK] Fix: https://github.com/WasmEdge/WasmEdge/issues/644#issue-1050904719. [Shreyas Atre] Added missing host registration for wasi in test Added Value in python [PySDK] Overload Python vm.run() function without return length. [Shreyas Atre] Use Step by step execution of WasmEdge VM and WasmEdge Function API calls to get the same. Return a boost::python::tuple of result and return list. Suggestions from https://github.com/WasmEdge/WasmEdge/issues/642 Status: * Tests fail https://github.com/WasmEdge/WasmEdge/issues/644 - [PySDK] Remove redundant definitions of enums. [Shreyas Atre] Suggestions from https://github.com/WasmEdge/WasmEdge/pull/633#issuecomment-964505682 [PySDK] Changed str for logging. [Shreyas Atre] str is not to be confused with doc Minor changes in Makefile [PySDK] Reference Issue fix. [Shreyas Atre] Previously the Configure and Store passed to VM would make the program crash. [PySDK] Docs: Added pydoc and latest example. [Shreyas Atre] Autogenerated pydoc output Latest run example [PySDK] Several Changes. [Shreyas Atre] Moved str definitions to separate doc_strings header Created major Wrappers around Store,Configure and VM contexts There is a minor issue in passing Store and Configure objects to VM Passes basic Fibonacci test [PySDK] Debug flag addition. [Shreyas Atre] [PySDK] Configure class: Add host registration. [Shreyas Atre] Overloading of python class Configure to support adding and removing of Host. Wraps Host Registration. [PySDK] Configure, Proposal support. [Shreyas Atre] Adds configuration support which is an api wrapped over contexts. Proposal are just enums [PySDK] Boilerplate for PySDK based on Boost. [Shreyas Atre] Currently it overloads WasmEdge Result as a boolean and supports version as a method. Logging is implemented as a class. Result supports message and code methods. [PySDK] Docs: Fix mkdocs yaml for HISTORY. [Shreyas Atre] [PySDK] Docs: Fix HISTORY generation. [Shreyas Atre] [PySDK] Version String function. [Shreyas Atre] Returns version string [Docs] Fix docs example. [Shreyas Atre] [Test] PySDK: Test commit. [Shreyas Atre] It is a very basic template for python port Initial Commit for python SDK. [Shreyas Atre]","title":"History"},{"location":"HISTORY/#unreleased","text":"[PySDK] Specify Types of parameters and return values in advance. [Shreyas Atre] Utilize the Type class implemented in python and specify as arguments in run function. https://github.com/WasmEdge/WasmEdge/issues/645 [PySDK] Fix: https://github.com/WasmEdge/WasmEdge/issues/644#issue-1050904719. [Shreyas Atre] Added missing host registration for wasi in test Added Value in python [PySDK] Overload Python vm.run() function without return length. [Shreyas Atre] Use Step by step execution of WasmEdge VM and WasmEdge Function API calls to get the same. Return a boost::python::tuple of result and return list. Suggestions from https://github.com/WasmEdge/WasmEdge/issues/642 Status: * Tests fail https://github.com/WasmEdge/WasmEdge/issues/644 - [PySDK] Remove redundant definitions of enums. [Shreyas Atre] Suggestions from https://github.com/WasmEdge/WasmEdge/pull/633#issuecomment-964505682 [PySDK] Changed str for logging. [Shreyas Atre] str is not to be confused with doc Minor changes in Makefile [PySDK] Reference Issue fix. [Shreyas Atre] Previously the Configure and Store passed to VM would make the program crash. [PySDK] Docs: Added pydoc and latest example. [Shreyas Atre] Autogenerated pydoc output Latest run example [PySDK] Several Changes. [Shreyas Atre] Moved str definitions to separate doc_strings header Created major Wrappers around Store,Configure and VM contexts There is a minor issue in passing Store and Configure objects to VM Passes basic Fibonacci test [PySDK] Debug flag addition. [Shreyas Atre] [PySDK] Configure class: Add host registration. [Shreyas Atre] Overloading of python class Configure to support adding and removing of Host. Wraps Host Registration. [PySDK] Configure, Proposal support. [Shreyas Atre] Adds configuration support which is an api wrapped over contexts. Proposal are just enums [PySDK] Boilerplate for PySDK based on Boost. [Shreyas Atre] Currently it overloads WasmEdge Result as a boolean and supports version as a method. Logging is implemented as a class. Result supports message and code methods. [PySDK] Docs: Fix mkdocs yaml for HISTORY. [Shreyas Atre] [PySDK] Docs: Fix HISTORY generation. [Shreyas Atre] [PySDK] Version String function. [Shreyas Atre] Returns version string [Docs] Fix docs example. [Shreyas Atre] [Test] PySDK: Test commit. [Shreyas Atre] It is a very basic template for python port Initial Commit for python SDK. [Shreyas Atre]","title":"(unreleased)"},{"location":"commands/auto_generated/","text":"Help on module WasmEdge: NAME WasmEdge CLASSES pybind11_builtins.pybind11_object(builtins.object) Configure Host Logging Proposal Result Store Type VM Value class Configure(pybind11_builtins.pybind11_object) | Method resolution order: | Configure | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __init__(...) | __init__(self: WasmEdge.Configure) -> None | | add(...) | add(*args, **kwargs) | Overloaded function. | | 1. add(self: WasmEdge.Configure, arg0: WasmEdge_Proposal) -> None | | 2. add(self: WasmEdge.Configure, arg0: WasmEdge_HostRegistration) -> None | | remove(...) | remove(*args, **kwargs) | Overloaded function. | | 1. remove(self: WasmEdge.Configure, arg0: WasmEdge_Proposal) -> None | | 2. remove(self: WasmEdge.Configure, arg0: WasmEdge_HostRegistration) -> None | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Host(pybind11_builtins.pybind11_object) | Members: | | Wasi | | WasmEdge | | Method resolution order: | Host | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __eq__(...) | __eq__(self: object, other: object) -> bool | | __getstate__(...) | __getstate__(self: object) -> int | | __hash__(...) | __hash__(self: object) -> int | | __index__(...) | __index__(self: WasmEdge.Host) -> int | | __init__(...) | __init__(self: WasmEdge.Host, value: int) -> None | | __int__(...) | __int__(self: WasmEdge.Host) -> int | | __ne__(...) | __ne__(self: object, other: object) -> bool | | __repr__(...) | __repr__(self: object) -> str | | __setstate__(...) | __setstate__(self: WasmEdge.Host, state: int) -> None | | __str__ = name(...) | name(self: handle) -> str | | ---------------------------------------------------------------------- | Readonly properties defined here: | | __members__ | | name | name(self: handle) -> str | | value | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | Wasi = <Host.Wasi: 0> | | WasmEdge = <Host.WasmEdge: 1> | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Logging(pybind11_builtins.pybind11_object) | Method resolution order: | Logging | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __init__(...) | __init__(self: WasmEdge.Logging) -> None | | __str__(...) | __str__(self: WasmEdge.Logging) -> str | | ---------------------------------------------------------------------- | Static methods defined here: | | debug(...) from builtins.PyCapsule | debug() -> None | | error(...) from builtins.PyCapsule | error() -> None | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Proposal(pybind11_builtins.pybind11_object) | Members: | | ImportExportMutGlobals | | NonTrapFloatToIntConversions | | BulkMemoryOperations | | ReferenceTypes | | SIMD | | TailCall | | Annotations | | Memory64 | | Threads | | ExceptionHandling | | FunctionReferences | | Method resolution order: | Proposal | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __eq__(...) | __eq__(self: object, other: object) -> bool | | __getstate__(...) | __getstate__(self: object) -> int | | __hash__(...) | __hash__(self: object) -> int | | __index__(...) | __index__(self: WasmEdge.Proposal) -> int | | __init__(...) | __init__(self: WasmEdge.Proposal, value: int) -> None | | __int__(...) | __int__(self: WasmEdge.Proposal) -> int | | __ne__(...) | __ne__(self: object, other: object) -> bool | | __repr__(...) | __repr__(self: object) -> str | | __setstate__(...) | __setstate__(self: WasmEdge.Proposal, state: int) -> None | | __str__ = name(...) | name(self: handle) -> str | | ---------------------------------------------------------------------- | Readonly properties defined here: | | __members__ | | name | name(self: handle) -> str | | value | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | Annotations = <Proposal.Annotations: 8> | | BulkMemoryOperations = <Proposal.BulkMemoryOperations: 4> | | ExceptionHandling = <Proposal.ExceptionHandling: 11> | | FunctionReferences = <Proposal.FunctionReferences: 12> | | ImportExportMutGlobals = <Proposal.ImportExportMutGlobals: 0> | | Memory64 = <Proposal.Memory64: 9> | | NonTrapFloatToIntConversions = <Proposal.NonTrapFloatToIntConversions:... | | ReferenceTypes = <Proposal.ReferenceTypes: 5> | | SIMD = <Proposal.SIMD: 6> | | TailCall = <Proposal.TailCall: 7> | | Threads = <Proposal.Threads: 10> | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Result(pybind11_builtins.pybind11_object) | Method resolution order: | Result | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __bool__(...) | __bool__(self: WasmEdge.Result) -> bool | | __init__(...) | __init__(self: WasmEdge.Result) -> None | | __str__(...) | __str__(self: WasmEdge.Result) -> str | | code(...) | code(self: WasmEdge.Result) -> int | | message(...) | message(self: WasmEdge.Result) -> str | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Store(pybind11_builtins.pybind11_object) | Method resolution order: | Store | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __init__(...) | __init__(self: WasmEdge.Store) -> None | | listFunctions(...) | listFunctions(self: WasmEdge.Store, arg0: int) -> list | | listModules(...) | listModules(self: WasmEdge.Store, arg0: int) -> list | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Type(pybind11_builtins.pybind11_object) | Members: | | I32 | | I64 | | F32 | | F64 | | V128 | | FuncRef | | ExternRef | | Method resolution order: | Type | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __eq__(...) | __eq__(self: object, other: object) -> bool | | __getstate__(...) | __getstate__(self: object) -> int | | __hash__(...) | __hash__(self: object) -> int | | __index__(...) | __index__(self: WasmEdge.Type) -> int | | __init__(...) | __init__(self: WasmEdge.Type, value: int) -> None | | __int__(...) | __int__(self: WasmEdge.Type) -> int | | __ne__(...) | __ne__(self: object, other: object) -> bool | | __repr__(...) | __repr__(self: object) -> str | | __setstate__(...) | __setstate__(self: WasmEdge.Type, state: int) -> None | | __str__ = name(...) | name(self: handle) -> str | | ---------------------------------------------------------------------- | Readonly properties defined here: | | __members__ | | name | name(self: handle) -> str | | value | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | ExternRef = <Type.ExternRef: 111> | | F32 = <Type.F32: 125> | | F64 = <Type.F64: 124> | | FuncRef = <Type.FuncRef: 112> | | I32 = <Type.I32: 127> | | I64 = <Type.I64: 126> | | V128 = <Type.V128: 123> | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class VM(pybind11_builtins.pybind11_object) | Method resolution order: | VM | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __init__(...) | __init__(*args, **kwargs) | Overloaded function. | | 1. __init__(self: WasmEdge.VM) -> None | | 2. __init__(self: WasmEdge.VM, arg0: WasmEdge.Configure) -> None | | 3. __init__(self: WasmEdge.VM, arg0: WasmEdge.Store) -> None | | 4. __init__(self: WasmEdge.VM, arg0: WasmEdge.Configure, arg1: WasmEdge.Store) -> None | | run(...) | run(*args, **kwargs) | Overloaded function. | | 1. run(self: WasmEdge.VM, arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> tuple | | 2. run(self: WasmEdge.VM, arg0: object, arg1: object, arg2: object) -> tuple | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. class Value(pybind11_builtins.pybind11_object) | Method resolution order: | Value | pybind11_builtins.pybind11_object | builtins.object | | Methods defined here: | | __init__(...) | __init__(self: WasmEdge.Value) -> None | | ---------------------------------------------------------------------- | Data descriptors defined here: | | Type | | Value | | ---------------------------------------------------------------------- | Static methods inherited from pybind11_builtins.pybind11_object: | | __new__(*args, **kwargs) from pybind11_builtins.pybind11_type | Create and return a new object. See help(type) for accurate signature. FUNCTIONS version(...) method of builtins.PyCapsule instance version() -> str DATA Annotations = <Proposal.Annotations: 8> BulkMemoryOperations = <Proposal.BulkMemoryOperations: 4> ExceptionHandling = <Proposal.ExceptionHandling: 11> ExternRef = <Type.ExternRef: 111> F32 = <Type.F32: 125> F64 = <Type.F64: 124> FuncRef = <Type.FuncRef: 112> FunctionReferences = <Proposal.FunctionReferences: 12> I32 = <Type.I32: 127> I64 = <Type.I64: 126> ImportExportMutGlobals = <Proposal.ImportExportMutGlobals: 0> Memory64 = <Proposal.Memory64: 9> NonTrapFloatToIntConversions = <Proposal.NonTrapFloatToIntConversions:... ReferenceTypes = <Proposal.ReferenceTypes: 5> SIMD = <Proposal.SIMD: 6> TailCall = <Proposal.TailCall: 7> Threads = <Proposal.Threads: 10> V128 = <Type.V128: 123> Wasi = <Host.Wasi: 0> WasmEdge = <Host.WasmEdge: 1> FILE /home/satacker/wasm_work/WasmEdge/bindings/python/WasmEdge.cpython-38-x86_64-linux-gnu.so","title":"AutoGenerated"},{"location":"commands/commands/","text":"Commands run example Takes .wasm path and function name , list of parameters and length of expected return values Python 1 2 3 4 5 6 7 8 9 10 11 12 13 import WasmEdge import os # WasmEdge/bindings/python/example.py wasm_base_path = os . path . abspath ( os . path . join ( __file__ , \"../../..\" )) fib_wasm = os . path . join ( wasm_base_path , \"tools/wasmedge/examples/fibonacci.wasm\" ) log = WasmEdge . Logging () log . debug () vm = WasmEdge . VM () res , l = vm . run ( fib_wasm , 'fib' , [ 10 ], 1 ) print ( l ) C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <wasmedge.h> #include <stdio.h> int main () { /* Create the configure context and add the WASI support. */ /* This step is not necessary unless you need WASI support. */ WasmEdge_ConfigureContext * ConfCxt = WasmEdge_ConfigureCreate (); WasmEdge_ConfigureAddHostRegistration ( ConfCxt , WasmEdge_HostRegistration_Wasi ); /* The configure and store context to the VM creation can be NULL. */ WasmEdge_VMContext * VMCxt = WasmEdge_VMCreate ( ConfCxt , NULL ); /* The parameters and returns arrays. */ WasmEdge_Value Params [ 1 ] = { WasmEdge_ValueGenI32 ( 5 ) }; WasmEdge_Value Returns [ 1 ]; /* Function name. */ WasmEdge_String FuncName = WasmEdge_StringCreateByCString ( \"fib\" ); /* Run the WASM function from file. */ WasmEdge_Result Res = WasmEdge_VMRunWasmFromFile ( VMCxt , \"fibonacci.wasm\" , FuncName , Params , 1 , Returns , 1 ); /* * Developers can run the WASM binary from buffer with the `WasmEdge_VMRunWasmFromBuffer()` API, * or from `WasmEdge_ASTModuleContext` object with the `WasmEdge_VMRunWasmFromASTModule()` API. */ if ( WasmEdge_ResultOK ( Res )) { printf ( \"Get the result: %d \\n \" , WasmEdge_ValueGetI32 ( Returns [ 0 ])); } else { printf ( \"Error message: %s \\n \" , WasmEdge_ResultGetMessage ( Res )); } /* Resources deallocations. */ WasmEdge_VMDelete ( VMCxt ); WasmEdge_ConfigureDelete ( ConfCxt ); WasmEdge_StringDelete ( FuncName ); return 0 ; } Output [ 2021 -10-14 02 :42:27.458 ] [ debug ] Execution succeeded. [ 2021 -10-14 02 :42:27.458 ] [ debug ] ==================== Statistics ==================== Total execution time: 53764 ns Wasm instructions execution time: 53764 ns Host functions execution time: 0 ns Executed wasm instructions count: 1854 Gas costs: 1854 Instructions per second: 34484041 [ '89' ]","title":"Commands"},{"location":"commands/commands/#commands","text":"run example Takes .wasm path and function name , list of parameters and length of expected return values Python 1 2 3 4 5 6 7 8 9 10 11 12 13 import WasmEdge import os # WasmEdge/bindings/python/example.py wasm_base_path = os . path . abspath ( os . path . join ( __file__ , \"../../..\" )) fib_wasm = os . path . join ( wasm_base_path , \"tools/wasmedge/examples/fibonacci.wasm\" ) log = WasmEdge . Logging () log . debug () vm = WasmEdge . VM () res , l = vm . run ( fib_wasm , 'fib' , [ 10 ], 1 ) print ( l ) C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <wasmedge.h> #include <stdio.h> int main () { /* Create the configure context and add the WASI support. */ /* This step is not necessary unless you need WASI support. */ WasmEdge_ConfigureContext * ConfCxt = WasmEdge_ConfigureCreate (); WasmEdge_ConfigureAddHostRegistration ( ConfCxt , WasmEdge_HostRegistration_Wasi ); /* The configure and store context to the VM creation can be NULL. */ WasmEdge_VMContext * VMCxt = WasmEdge_VMCreate ( ConfCxt , NULL ); /* The parameters and returns arrays. */ WasmEdge_Value Params [ 1 ] = { WasmEdge_ValueGenI32 ( 5 ) }; WasmEdge_Value Returns [ 1 ]; /* Function name. */ WasmEdge_String FuncName = WasmEdge_StringCreateByCString ( \"fib\" ); /* Run the WASM function from file. */ WasmEdge_Result Res = WasmEdge_VMRunWasmFromFile ( VMCxt , \"fibonacci.wasm\" , FuncName , Params , 1 , Returns , 1 ); /* * Developers can run the WASM binary from buffer with the `WasmEdge_VMRunWasmFromBuffer()` API, * or from `WasmEdge_ASTModuleContext` object with the `WasmEdge_VMRunWasmFromASTModule()` API. */ if ( WasmEdge_ResultOK ( Res )) { printf ( \"Get the result: %d \\n \" , WasmEdge_ValueGetI32 ( Returns [ 0 ])); } else { printf ( \"Error message: %s \\n \" , WasmEdge_ResultGetMessage ( Res )); } /* Resources deallocations. */ WasmEdge_VMDelete ( VMCxt ); WasmEdge_ConfigureDelete ( ConfCxt ); WasmEdge_StringDelete ( FuncName ); return 0 ; } Output [ 2021 -10-14 02 :42:27.458 ] [ debug ] Execution succeeded. [ 2021 -10-14 02 :42:27.458 ] [ debug ] ==================== Statistics ==================== Total execution time: 53764 ns Wasm instructions execution time: 53764 ns Host functions execution time: 0 ns Executed wasm instructions count: 1854 Gas costs: 1854 Instructions per second: 34484041 [ '89' ]","title":"Commands"},{"location":"development/development/","text":"Development Docs git clone https://github.com/SAtacker/WasmEdge.git cd WasmEdge git checkout pysdk cd bindings/python make virtualenv source .venv/bin/activate make serve","title":"Development"},{"location":"development/development/#development","text":"Docs git clone https://github.com/SAtacker/WasmEdge.git cd WasmEdge git checkout pysdk cd bindings/python make virtualenv source .venv/bin/activate make serve","title":"Development"}]}