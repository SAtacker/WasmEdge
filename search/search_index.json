{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Py SDK for WasmEdge Work in progress Motivation Python is a well-known programming language and supports quick development for a variety of domains. WasmEdge has a go language SDK implemented here . This proposal aims to implement a Python ( for the CPython implementation of Python ) SDK using the above implementation as a reference, Details Some rationale around performance- Python has never been intended for performance-critical applications while on the other hand, WasmEdge has different intentions. It is designed to be a lightweight and fast VM for Wasm. The idea behind python is that developers spend more time reading the code. Python SDK should be way easier to use. And as far as performance is considered, all of the code behind this package can be wrapped around the C-API to make it as closer to the native speed as possible. This SDK should be able to provide all the functions present in the C - API of WasmEdge (link given in the appendix). Stuff to look out for: Data-types integrations for all the three python-c-wasm. Safety (no memory access of host from .wasm modules) Potentially it is also possible to wrap around WasmEdge functionalities to support Wasm C API if it doesn't already. The end goal should be to use WasmEdge as a backend and provide an Easy to use SDK over this. Appendix C - API for WasmEdge is already present. - Docs C - API for the CPython implementation of python is quite mature without third-party tools and Boost.Python is also available Examples Misc: I'll probably need help in this to make it as correct as possible if anything seems a bit off. Thanks a lot already :-D Project layout . \u251c\u2500\u2500 Containerfile \u251c\u2500\u2500 coverage.xml \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocks.yml \u251c\u2500\u2500 pywasmedge \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 WasmEdge.h \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 WasmEdge.c \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements-test.txt \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_base.py \u251c\u2500\u2500 VERSION","title":"Home"},{"location":"#welcome-to-py-sdk-for-wasmedge","text":"Work in progress","title":"Welcome to Py SDK for WasmEdge"},{"location":"#motivation","text":"Python is a well-known programming language and supports quick development for a variety of domains. WasmEdge has a go language SDK implemented here . This proposal aims to implement a Python ( for the CPython implementation of Python ) SDK using the above implementation as a reference,","title":"Motivation"},{"location":"#details","text":"Some rationale around performance- Python has never been intended for performance-critical applications while on the other hand, WasmEdge has different intentions. It is designed to be a lightweight and fast VM for Wasm. The idea behind python is that developers spend more time reading the code. Python SDK should be way easier to use. And as far as performance is considered, all of the code behind this package can be wrapped around the C-API to make it as closer to the native speed as possible. This SDK should be able to provide all the functions present in the C - API of WasmEdge (link given in the appendix). Stuff to look out for: Data-types integrations for all the three python-c-wasm. Safety (no memory access of host from .wasm modules) Potentially it is also possible to wrap around WasmEdge functionalities to support Wasm C API if it doesn't already. The end goal should be to use WasmEdge as a backend and provide an Easy to use SDK over this.","title":"Details"},{"location":"#appendix","text":"C - API for WasmEdge is already present. - Docs C - API for the CPython implementation of python is quite mature without third-party tools and Boost.Python is also available Examples","title":"Appendix"},{"location":"#misc","text":"I'll probably need help in this to make it as correct as possible if anything seems a bit off. Thanks a lot already :-D","title":"Misc:"},{"location":"#project-layout","text":". \u251c\u2500\u2500 Containerfile \u251c\u2500\u2500 coverage.xml \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocks.yml \u251c\u2500\u2500 pywasmedge \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 WasmEdge.h \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 WasmEdge.c \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements-test.txt \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_base.py \u251c\u2500\u2500 VERSION","title":"Project layout"},{"location":"HISTORY/","text":"(unreleased) [PySDK] Fix: https://github.com/WasmEdge/WasmEdge/issues/644#issue-1050904719. [Shreyas Atre] Added missing host registration for wasi in test Added Value in python [PySDK] Overload Python vm.run() function without return length. [Shreyas Atre] Use Step by step execution of WasmEdge VM and WasmEdge Function API calls to get the same. Return a boost::python::tuple of result and return list. Suggestions from https://github.com/WasmEdge/WasmEdge/issues/642 Status: * Tests fail https://github.com/WasmEdge/WasmEdge/issues/644 - [PySDK] Remove redundant definitions of enums. [Shreyas Atre] Suggestions from https://github.com/WasmEdge/WasmEdge/pull/633#issuecomment-964505682 [PySDK] Changed str for logging. [Shreyas Atre] str is not to be confused with doc Minor changes in Makefile [PySDK] Reference Issue fix. [Shreyas Atre] Previously the Configure and Store passed to VM would make the program crash. [PySDK] Docs: Added pydoc and latest example. [Shreyas Atre] Autogenerated pydoc output Latest run example [PySDK] Several Changes. [Shreyas Atre] Moved str definitions to separate doc_strings header Created major Wrappers around Store,Configure and VM contexts There is a minor issue in passing Store and Configure objects to VM Passes basic Fibonacci test [PySDK] Debug flag addition. [Shreyas Atre] [PySDK] Configure class: Add host registration. [Shreyas Atre] Overloading of python class Configure to support adding and removing of Host. Wraps Host Registration. [PySDK] Configure, Proposal support. [Shreyas Atre] Adds configuration support which is an api wrapped over contexts. Proposal are just enums [PySDK] Boilerplate for PySDK based on Boost. [Shreyas Atre] Currently it overloads WasmEdge Result as a boolean and supports version as a method. Logging is implemented as a class. Result supports message and code methods. [PySDK] Docs: Fix mkdocs yaml for HISTORY. [Shreyas Atre] [PySDK] Docs: Fix HISTORY generation. [Shreyas Atre] [PySDK] Version String function. [Shreyas Atre] Returns version string [Docs] Fix docs example. [Shreyas Atre] [Test] PySDK: Test commit. [Shreyas Atre] It is a very basic template for python port Initial Commit for python SDK. [Shreyas Atre]","title":"History"},{"location":"HISTORY/#unreleased","text":"[PySDK] Fix: https://github.com/WasmEdge/WasmEdge/issues/644#issue-1050904719. [Shreyas Atre] Added missing host registration for wasi in test Added Value in python [PySDK] Overload Python vm.run() function without return length. [Shreyas Atre] Use Step by step execution of WasmEdge VM and WasmEdge Function API calls to get the same. Return a boost::python::tuple of result and return list. Suggestions from https://github.com/WasmEdge/WasmEdge/issues/642 Status: * Tests fail https://github.com/WasmEdge/WasmEdge/issues/644 - [PySDK] Remove redundant definitions of enums. [Shreyas Atre] Suggestions from https://github.com/WasmEdge/WasmEdge/pull/633#issuecomment-964505682 [PySDK] Changed str for logging. [Shreyas Atre] str is not to be confused with doc Minor changes in Makefile [PySDK] Reference Issue fix. [Shreyas Atre] Previously the Configure and Store passed to VM would make the program crash. [PySDK] Docs: Added pydoc and latest example. [Shreyas Atre] Autogenerated pydoc output Latest run example [PySDK] Several Changes. [Shreyas Atre] Moved str definitions to separate doc_strings header Created major Wrappers around Store,Configure and VM contexts There is a minor issue in passing Store and Configure objects to VM Passes basic Fibonacci test [PySDK] Debug flag addition. [Shreyas Atre] [PySDK] Configure class: Add host registration. [Shreyas Atre] Overloading of python class Configure to support adding and removing of Host. Wraps Host Registration. [PySDK] Configure, Proposal support. [Shreyas Atre] Adds configuration support which is an api wrapped over contexts. Proposal are just enums [PySDK] Boilerplate for PySDK based on Boost. [Shreyas Atre] Currently it overloads WasmEdge Result as a boolean and supports version as a method. Logging is implemented as a class. Result supports message and code methods. [PySDK] Docs: Fix mkdocs yaml for HISTORY. [Shreyas Atre] [PySDK] Docs: Fix HISTORY generation. [Shreyas Atre] [PySDK] Version String function. [Shreyas Atre] Returns version string [Docs] Fix docs example. [Shreyas Atre] [Test] PySDK: Test commit. [Shreyas Atre] It is a very basic template for python port Initial Commit for python SDK. [Shreyas Atre]","title":"(unreleased)"},{"location":"commands/auto_generated/","text":"Help on module WasmEdge: NAME WasmEdge CLASSES Boost.Python.enum(builtins.int) Host Proposal Type Boost.Python.instance(builtins.object) Configure Logging Result Store VM Value class Configure(Boost.Python.instance) | Method resolution order: | Configure | Boost.Python.instance | builtins.object | | Static methods defined here: | | __init__(...) | __init__( (object)arg1) -> None : | | C++ signature : | void __init__(_object*) | | __reduce__ = <unnamed Boost.Python function>(...) | | add(...) | add( (Configure)arg1, (Proposal)arg2) -> None : | | C++ signature : | void add(pysdk::Configure {lvalue},WasmEdge_Proposal) | | add( (Configure)arg1, (Host)arg2) -> None : | | C++ signature : | void add(pysdk::Configure {lvalue},WasmEdge_HostRegistration) | | remove(...) | remove( (Configure)arg1, (Proposal)arg2) -> None : | | C++ signature : | void remove(pysdk::Configure {lvalue},WasmEdge_Proposal) | | remove( (Configure)arg1, (Host)arg2) -> None : | | C++ signature : | void remove(pysdk::Configure {lvalue},WasmEdge_HostRegistration) | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | __instance_size__ = 24 | | ---------------------------------------------------------------------- | Static methods inherited from Boost.Python.instance: | | __new__(*args, **kwargs) from Boost.Python.class | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.instance: | | __dict__ | | __weakref__ class Host(Boost.Python.enum) | int([x]) -> integer | int(x, base=10) -> integer | | Convert a number or string to an integer, or return 0 if no arguments | are given. If x is a number, return x.__int__(). For floating point | numbers, this truncates towards zero. | | If x is not a number or if base is given, then x must be a string, | bytes, or bytearray instance representing an integer literal in the | given base. The literal can be preceded by '+' or '-' and be surrounded | by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. | Base 0 means to interpret the base from the string as an integer literal. | >>> int('0b100', base=0) | 4 | | Method resolution order: | Host | Boost.Python.enum | builtins.int | builtins.object | | Data and other attributes defined here: | | Wasi = WasmEdge.Host.Wasi | | WasmEdge = WasmEdge.Host.WasmEdge | | names = {'Wasi': WasmEdge.Host.Wasi, 'WasmEdge': WasmEdge.Host.WasmEdg... | | values = {0: WasmEdge.Host.Wasi, 1: WasmEdge.Host.WasmEdge} | | ---------------------------------------------------------------------- | Methods inherited from Boost.Python.enum: | | __repr__(self, /) | Return repr(self). | | __str__(self, /) | Return str(self). | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.enum: | | name | | ---------------------------------------------------------------------- | Methods inherited from builtins.int: | | __abs__(self, /) | abs(self) | | __add__(self, value, /) | Return self+value. | | __and__(self, value, /) | Return self&value. | | __bool__(self, /) | self != 0 | | __ceil__(...) | Ceiling of an Integral returns itself. | | __divmod__(self, value, /) | Return divmod(self, value). | | __eq__(self, value, /) | Return self==value. | | __float__(self, /) | float(self) | | __floor__(...) | Flooring an Integral returns itself. | | __floordiv__(self, value, /) | Return self//value. | | __format__(self, format_spec, /) | Default object formatter. | | __ge__(self, value, /) | Return self>=value. | | __getattribute__(self, name, /) | Return getattr(self, name). | | __getnewargs__(self, /) | | __gt__(self, value, /) | Return self>value. | | __hash__(self, /) | Return hash(self). | | __index__(self, /) | Return self converted to an integer, if self is suitable for use as an index into a list. | | __int__(self, /) | int(self) | | __invert__(self, /) | ~self | | __le__(self, value, /) | Return self<=value. | | __lshift__(self, value, /) | Return self<<value. | | __lt__(self, value, /) | Return self<value. | | __mod__(self, value, /) | Return self%value. | | __mul__(self, value, /) | Return self*value. | | __ne__(self, value, /) | Return self!=value. | | __neg__(self, /) | -self | | __or__(self, value, /) | Return self|value. | | __pos__(self, /) | +self | | __pow__(self, value, mod=None, /) | Return pow(self, value, mod). | | __radd__(self, value, /) | Return value+self. | | __rand__(self, value, /) | Return value&self. | | __rdivmod__(self, value, /) | Return divmod(value, self). | | __rfloordiv__(self, value, /) | Return value//self. | | __rlshift__(self, value, /) | Return value<<self. | | __rmod__(self, value, /) | Return value%self. | | __rmul__(self, value, /) | Return value*self. | | __ror__(self, value, /) | Return value|self. | | __round__(...) | Rounding an Integral returns itself. | Rounding with an ndigits argument also returns an integer. | | __rpow__(self, value, mod=None, /) | Return pow(value, self, mod). | | __rrshift__(self, value, /) | Return value>>self. | | __rshift__(self, value, /) | Return self>>value. | | __rsub__(self, value, /) | Return value-self. | | __rtruediv__(self, value, /) | Return value/self. | | __rxor__(self, value, /) | Return value^self. | | __sizeof__(self, /) | Returns size in memory, in bytes. | | __sub__(self, value, /) | Return self-value. | | __truediv__(self, value, /) | Return self/value. | | __trunc__(...) | Truncating an Integral returns itself. | | __xor__(self, value, /) | Return self^value. | | as_integer_ratio(self, /) | Return integer ratio. | | Return a pair of integers, whose ratio is exactly equal to the original int | and with a positive denominator. | | >>> (10).as_integer_ratio() | (10, 1) | >>> (-10).as_integer_ratio() | (-10, 1) | >>> (0).as_integer_ratio() | (0, 1) | | bit_length(self, /) | Number of bits necessary to represent self in binary. | | >>> bin(37) | '0b100101' | >>> (37).bit_length() | 6 | | conjugate(...) | Returns self, the complex conjugate of any int. | | to_bytes(self, /, length, byteorder, *, signed=False) | Return an array of bytes representing an integer. | | length | Length of bytes object to use. An OverflowError is raised if the | integer is not representable with the given number of bytes. | byteorder | The byte order used to represent the integer. If byteorder is 'big', | the most significant byte is at the beginning of the byte array. If | byteorder is 'little', the most significant byte is at the end of the | byte array. To request the native byte order of the host system, use | `sys.byteorder' as the byte order value. | signed | Determines whether two's complement is used to represent the integer. | If signed is False and a negative integer is given, an OverflowError | is raised. | | ---------------------------------------------------------------------- | Class methods inherited from builtins.int: | | from_bytes(bytes, byteorder, *, signed=False) from builtins.type | Return the integer represented by the given array of bytes. | | bytes | Holds the array of bytes to convert. The argument must either | support the buffer protocol or be an iterable object producing bytes. | Bytes and bytearray are examples of built-in objects that support the | buffer protocol. | byteorder | The byte order used to represent the integer. If byteorder is 'big', | the most significant byte is at the beginning of the byte array. If | byteorder is 'little', the most significant byte is at the end of the | byte array. To request the native byte order of the host system, use | `sys.byteorder' as the byte order value. | signed | Indicates whether two's complement is used to represent the integer. | | ---------------------------------------------------------------------- | Static methods inherited from builtins.int: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from builtins.int: | | denominator | the denominator of a rational number in lowest terms | | imag | the imaginary part of a complex number | | numerator | the numerator of a rational number in lowest terms | | real | the real part of a complex number class Logging(Boost.Python.instance) | Method resolution order: | Logging | Boost.Python.instance | builtins.object | | Static methods defined here: | | __init__(...) | __init__( (object)arg1) -> None : | | C++ signature : | void __init__(_object*) | | __reduce__ = <unnamed Boost.Python function>(...) | | __str__(...) | __str__( (Logging)arg1) -> str : | | C++ signature : | char const* __str__(pysdk::logging {lvalue}) | | debug(...) | debug() -> None : | | C++ signature : | void debug() | | error(...) | error() -> None : | | C++ signature : | void error() | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | __instance_size__ = 24 | | ---------------------------------------------------------------------- | Static methods inherited from Boost.Python.instance: | | __new__(*args, **kwargs) from Boost.Python.class | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.instance: | | __dict__ | | __weakref__ class Proposal(Boost.Python.enum) | int([x]) -> integer | int(x, base=10) -> integer | | Convert a number or string to an integer, or return 0 if no arguments | are given. If x is a number, return x.__int__(). For floating point | numbers, this truncates towards zero. | | If x is not a number or if base is given, then x must be a string, | bytes, or bytearray instance representing an integer literal in the | given base. The literal can be preceded by '+' or '-' and be surrounded | by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. | Base 0 means to interpret the base from the string as an integer literal. | >>> int('0b100', base=0) | 4 | | Method resolution order: | Proposal | Boost.Python.enum | builtins.int | builtins.object | | Data and other attributes defined here: | | Annotations = WasmEdge.Proposal.Annotations | | BulkMemoryOperations = WasmEdge.Proposal.BulkMemoryOperations | | ExceptionHandling = WasmEdge.Proposal.ExceptionHandling | | FunctionReferences = WasmEdge.Proposal.FunctionReferences | | Memory64 = WasmEdge.Proposal.Memory64 | | NonTrapFloatToIntConversions = WasmEdge.Proposal.NonTrapFloatToIntConv... | | ReferenceTypes = WasmEdge.Proposal.ReferenceTypes | | SIMD = WasmEdge.Proposal.SIMD | | TailCall = WasmEdge.Proposal.TailCall | | Threads = WasmEdge.Proposal.Threads | | names = {'Annotations': WasmEdge.Proposal.Annotations, 'BulkMemoryOper... | | values = {0: WasmEdge.Proposal.BulkMemoryOperations, 1: WasmEdge.Propo... | | ---------------------------------------------------------------------- | Methods inherited from Boost.Python.enum: | | __repr__(self, /) | Return repr(self). | | __str__(self, /) | Return str(self). | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.enum: | | name | | ---------------------------------------------------------------------- | Methods inherited from builtins.int: | | __abs__(self, /) | abs(self) | | __add__(self, value, /) | Return self+value. | | __and__(self, value, /) | Return self&value. | | __bool__(self, /) | self != 0 | | __ceil__(...) | Ceiling of an Integral returns itself. | | __divmod__(self, value, /) | Return divmod(self, value). | | __eq__(self, value, /) | Return self==value. | | __float__(self, /) | float(self) | | __floor__(...) | Flooring an Integral returns itself. | | __floordiv__(self, value, /) | Return self//value. | | __format__(self, format_spec, /) | Default object formatter. | | __ge__(self, value, /) | Return self>=value. | | __getattribute__(self, name, /) | Return getattr(self, name). | | __getnewargs__(self, /) | | __gt__(self, value, /) | Return self>value. | | __hash__(self, /) | Return hash(self). | | __index__(self, /) | Return self converted to an integer, if self is suitable for use as an index into a list. | | __int__(self, /) | int(self) | | __invert__(self, /) | ~self | | __le__(self, value, /) | Return self<=value. | | __lshift__(self, value, /) | Return self<<value. | | __lt__(self, value, /) | Return self<value. | | __mod__(self, value, /) | Return self%value. | | __mul__(self, value, /) | Return self*value. | | __ne__(self, value, /) | Return self!=value. | | __neg__(self, /) | -self | | __or__(self, value, /) | Return self|value. | | __pos__(self, /) | +self | | __pow__(self, value, mod=None, /) | Return pow(self, value, mod). | | __radd__(self, value, /) | Return value+self. | | __rand__(self, value, /) | Return value&self. | | __rdivmod__(self, value, /) | Return divmod(value, self). | | __rfloordiv__(self, value, /) | Return value//self. | | __rlshift__(self, value, /) | Return value<<self. | | __rmod__(self, value, /) | Return value%self. | | __rmul__(self, value, /) | Return value*self. | | __ror__(self, value, /) | Return value|self. | | __round__(...) | Rounding an Integral returns itself. | Rounding with an ndigits argument also returns an integer. | | __rpow__(self, value, mod=None, /) | Return pow(value, self, mod). | | __rrshift__(self, value, /) | Return value>>self. | | __rshift__(self, value, /) | Return self>>value. | | __rsub__(self, value, /) | Return value-self. | | __rtruediv__(self, value, /) | Return value/self. | | __rxor__(self, value, /) | Return value^self. | | __sizeof__(self, /) | Returns size in memory, in bytes. | | __sub__(self, value, /) | Return self-value. | | __truediv__(self, value, /) | Return self/value. | | __trunc__(...) | Truncating an Integral returns itself. | | __xor__(self, value, /) | Return self^value. | | as_integer_ratio(self, /) | Return integer ratio. | | Return a pair of integers, whose ratio is exactly equal to the original int | and with a positive denominator. | | >>> (10).as_integer_ratio() | (10, 1) | >>> (-10).as_integer_ratio() | (-10, 1) | >>> (0).as_integer_ratio() | (0, 1) | | bit_length(self, /) | Number of bits necessary to represent self in binary. | | >>> bin(37) | '0b100101' | >>> (37).bit_length() | 6 | | conjugate(...) | Returns self, the complex conjugate of any int. | | to_bytes(self, /, length, byteorder, *, signed=False) | Return an array of bytes representing an integer. | | length | Length of bytes object to use. An OverflowError is raised if the | integer is not representable with the given number of bytes. | byteorder | The byte order used to represent the integer. If byteorder is 'big', | the most significant byte is at the beginning of the byte array. If | byteorder is 'little', the most significant byte is at the end of the | byte array. To request the native byte order of the host system, use | `sys.byteorder' as the byte order value. | signed | Determines whether two's complement is used to represent the integer. | If signed is False and a negative integer is given, an OverflowError | is raised. | | ---------------------------------------------------------------------- | Class methods inherited from builtins.int: | | from_bytes(bytes, byteorder, *, signed=False) from builtins.type | Return the integer represented by the given array of bytes. | | bytes | Holds the array of bytes to convert. The argument must either | support the buffer protocol or be an iterable object producing bytes. | Bytes and bytearray are examples of built-in objects that support the | buffer protocol. | byteorder | The byte order used to represent the integer. If byteorder is 'big', | the most significant byte is at the beginning of the byte array. If | byteorder is 'little', the most significant byte is at the end of the | byte array. To request the native byte order of the host system, use | `sys.byteorder' as the byte order value. | signed | Indicates whether two's complement is used to represent the integer. | | ---------------------------------------------------------------------- | Static methods inherited from builtins.int: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from builtins.int: | | denominator | the denominator of a rational number in lowest terms | | imag | the imaginary part of a complex number | | numerator | the numerator of a rational number in lowest terms | | real | the real part of a complex number class Result(Boost.Python.instance) | Method resolution order: | Result | Boost.Python.instance | builtins.object | | Static methods defined here: | | __bool__(...) | __bool__( (Result)arg1) -> bool : | | C++ signature : | bool __bool__(pysdk::result {lvalue}) | | __init__(...) | __init__( (object)arg1) -> None : | | C++ signature : | void __init__(_object*) | | __reduce__ = <unnamed Boost.Python function>(...) | | __str__(...) | __str__( (Result)arg1) -> str : | | C++ signature : | char const* __str__(pysdk::result {lvalue}) | | code(...) | code( (Result)arg1) -> int : | | C++ signature : | int code(pysdk::result {lvalue}) | | message(...) | message( (Result)arg1) -> str : | | C++ signature : | char const* message(pysdk::result {lvalue}) | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | __instance_size__ = 24 | | ---------------------------------------------------------------------- | Static methods inherited from Boost.Python.instance: | | __new__(*args, **kwargs) from Boost.Python.class | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.instance: | | __dict__ | | __weakref__ class Store(Boost.Python.instance) | Method resolution order: | Store | Boost.Python.instance | builtins.object | | Static methods defined here: | | __init__(...) | __init__( (object)arg1) -> None : | | C++ signature : | void __init__(_object*) | | __reduce__ = <unnamed Boost.Python function>(...) | | listFunctions(...) | listFunctions( (Store)arg1, (int)arg2) -> list : | | C++ signature : | boost::python::list listFunctions(pysdk::Store {lvalue},int) | | listModules(...) | listModules( (Store)arg1, (int)arg2) -> list : | | C++ signature : | boost::python::list listModules(pysdk::Store {lvalue},int) | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | __instance_size__ = 24 | | ---------------------------------------------------------------------- | Static methods inherited from Boost.Python.instance: | | __new__(*args, **kwargs) from Boost.Python.class | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.instance: | | __dict__ | | __weakref__ class Type(Boost.Python.enum) | int([x]) -> integer | int(x, base=10) -> integer | | Convert a number or string to an integer, or return 0 if no arguments | are given. If x is a number, return x.__int__(). For floating point | numbers, this truncates towards zero. | | If x is not a number or if base is given, then x must be a string, | bytes, or bytearray instance representing an integer literal in the | given base. The literal can be preceded by '+' or '-' and be surrounded | by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. | Base 0 means to interpret the base from the string as an integer literal. | >>> int('0b100', base=0) | 4 | | Method resolution order: | Type | Boost.Python.enum | builtins.int | builtins.object | | Data and other attributes defined here: | | ExternRef = WasmEdge.Type.ExternRef | | F32 = WasmEdge.Type.F32 | | F64 = WasmEdge.Type.F64 | | FuncRef = WasmEdge.Type.FuncRef | | I32 = WasmEdge.Type.I32 | | I64 = WasmEdge.Type.I64 | | V128 = WasmEdge.Type.V128 | | names = {'ExternRef': WasmEdge.Type.ExternRef, 'F32': WasmEdge.Type.F3... | | values = {111: WasmEdge.Type.ExternRef, 112: WasmEdge.Type.FuncRef, 12... | | ---------------------------------------------------------------------- | Methods inherited from Boost.Python.enum: | | __repr__(self, /) | Return repr(self). | | __str__(self, /) | Return str(self). | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.enum: | | name | | ---------------------------------------------------------------------- | Methods inherited from builtins.int: | | __abs__(self, /) | abs(self) | | __add__(self, value, /) | Return self+value. | | __and__(self, value, /) | Return self&value. | | __bool__(self, /) | self != 0 | | __ceil__(...) | Ceiling of an Integral returns itself. | | __divmod__(self, value, /) | Return divmod(self, value). | | __eq__(self, value, /) | Return self==value. | | __float__(self, /) | float(self) | | __floor__(...) | Flooring an Integral returns itself. | | __floordiv__(self, value, /) | Return self//value. | | __format__(self, format_spec, /) | Default object formatter. | | __ge__(self, value, /) | Return self>=value. | | __getattribute__(self, name, /) | Return getattr(self, name). | | __getnewargs__(self, /) | | __gt__(self, value, /) | Return self>value. | | __hash__(self, /) | Return hash(self). | | __index__(self, /) | Return self converted to an integer, if self is suitable for use as an index into a list. | | __int__(self, /) | int(self) | | __invert__(self, /) | ~self | | __le__(self, value, /) | Return self<=value. | | __lshift__(self, value, /) | Return self<<value. | | __lt__(self, value, /) | Return self<value. | | __mod__(self, value, /) | Return self%value. | | __mul__(self, value, /) | Return self*value. | | __ne__(self, value, /) | Return self!=value. | | __neg__(self, /) | -self | | __or__(self, value, /) | Return self|value. | | __pos__(self, /) | +self | | __pow__(self, value, mod=None, /) | Return pow(self, value, mod). | | __radd__(self, value, /) | Return value+self. | | __rand__(self, value, /) | Return value&self. | | __rdivmod__(self, value, /) | Return divmod(value, self). | | __rfloordiv__(self, value, /) | Return value//self. | | __rlshift__(self, value, /) | Return value<<self. | | __rmod__(self, value, /) | Return value%self. | | __rmul__(self, value, /) | Return value*self. | | __ror__(self, value, /) | Return value|self. | | __round__(...) | Rounding an Integral returns itself. | Rounding with an ndigits argument also returns an integer. | | __rpow__(self, value, mod=None, /) | Return pow(value, self, mod). | | __rrshift__(self, value, /) | Return value>>self. | | __rshift__(self, value, /) | Return self>>value. | | __rsub__(self, value, /) | Return value-self. | | __rtruediv__(self, value, /) | Return value/self. | | __rxor__(self, value, /) | Return value^self. | | __sizeof__(self, /) | Returns size in memory, in bytes. | | __sub__(self, value, /) | Return self-value. | | __truediv__(self, value, /) | Return self/value. | | __trunc__(...) | Truncating an Integral returns itself. | | __xor__(self, value, /) | Return self^value. | | as_integer_ratio(self, /) | Return integer ratio. | | Return a pair of integers, whose ratio is exactly equal to the original int | and with a positive denominator. | | >>> (10).as_integer_ratio() | (10, 1) | >>> (-10).as_integer_ratio() | (-10, 1) | >>> (0).as_integer_ratio() | (0, 1) | | bit_length(self, /) | Number of bits necessary to represent self in binary. | | >>> bin(37) | '0b100101' | >>> (37).bit_length() | 6 | | conjugate(...) | Returns self, the complex conjugate of any int. | | to_bytes(self, /, length, byteorder, *, signed=False) | Return an array of bytes representing an integer. | | length | Length of bytes object to use. An OverflowError is raised if the | integer is not representable with the given number of bytes. | byteorder | The byte order used to represent the integer. If byteorder is 'big', | the most significant byte is at the beginning of the byte array. If | byteorder is 'little', the most significant byte is at the end of the | byte array. To request the native byte order of the host system, use | `sys.byteorder' as the byte order value. | signed | Determines whether two's complement is used to represent the integer. | If signed is False and a negative integer is given, an OverflowError | is raised. | | ---------------------------------------------------------------------- | Class methods inherited from builtins.int: | | from_bytes(bytes, byteorder, *, signed=False) from builtins.type | Return the integer represented by the given array of bytes. | | bytes | Holds the array of bytes to convert. The argument must either | support the buffer protocol or be an iterable object producing bytes. | Bytes and bytearray are examples of built-in objects that support the | buffer protocol. | byteorder | The byte order used to represent the integer. If byteorder is 'big', | the most significant byte is at the beginning of the byte array. If | byteorder is 'little', the most significant byte is at the end of the | byte array. To request the native byte order of the host system, use | `sys.byteorder' as the byte order value. | signed | Indicates whether two's complement is used to represent the integer. | | ---------------------------------------------------------------------- | Static methods inherited from builtins.int: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from builtins.int: | | denominator | the denominator of a rational number in lowest terms | | imag | the imaginary part of a complex number | | numerator | the numerator of a rational number in lowest terms | | real | the real part of a complex number class VM(Boost.Python.instance) | Method resolution order: | VM | Boost.Python.instance | builtins.object | | Static methods defined here: | | __init__(...) | __init__( (object)arg1) -> None : | | C++ signature : | void __init__(_object*) | | __init__( (object)arg1, (Configure)arg2) -> None : | | C++ signature : | void __init__(_object*,pysdk::Configure {lvalue}) | | __init__( (object)arg1, (Store)arg2) -> None : | | C++ signature : | void __init__(_object*,pysdk::Store {lvalue}) | | __init__( (object)arg1, (Configure)arg2, (Store)arg3) -> None : | | C++ signature : | void __init__(_object*,pysdk::Configure {lvalue},pysdk::Store {lvalue}) | | __reduce__ = <unnamed Boost.Python function>(...) | | run(...) | run( (VM)arg1, (object)arg2, (object)arg3, (object)arg4 [, (object)arg5]) -> tuple : | | C++ signature : | boost::python::tuple run(pysdk::VM {lvalue},boost::python::api::object,boost::python::api::object,boost::python::api::object [,boost::python::api::object]) | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | __instance_size__ = 24 | | ---------------------------------------------------------------------- | Static methods inherited from Boost.Python.instance: | | __new__(*args, **kwargs) from Boost.Python.class | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.instance: | | __dict__ | | __weakref__ class Value(Boost.Python.instance) | Method resolution order: | Value | Boost.Python.instance | builtins.object | | Static methods defined here: | | __init__(...) | __init__( (object)arg1) -> None : | | C++ signature : | void __init__(_object*) | | __reduce__ = <unnamed Boost.Python function>(...) | | ---------------------------------------------------------------------- | Data descriptors defined here: | | Type | | Value | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | __instance_size__ = 48 | | ---------------------------------------------------------------------- | Static methods inherited from Boost.Python.instance: | | __new__(*args, **kwargs) from Boost.Python.class | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data descriptors inherited from Boost.Python.instance: | | __dict__ | | __weakref__ FUNCTIONS version(...) version() -> str : C++ signature : char const* version() DATA Annotations = WasmEdge.Proposal.Annotations BulkMemoryOperations = WasmEdge.Proposal.BulkMemoryOperations ExceptionHandling = WasmEdge.Proposal.ExceptionHandling ExternRef = WasmEdge.Type.ExternRef F32 = WasmEdge.Type.F32 F64 = WasmEdge.Type.F64 FuncRef = WasmEdge.Type.FuncRef FunctionReferences = WasmEdge.Proposal.FunctionReferences I32 = WasmEdge.Type.I32 I64 = WasmEdge.Type.I64 Memory64 = WasmEdge.Proposal.Memory64 NonTrapFloatToIntConversions = WasmEdge.Proposal.NonTrapFloatToIntConv... ReferenceTypes = WasmEdge.Proposal.ReferenceTypes SIMD = WasmEdge.Proposal.SIMD TailCall = WasmEdge.Proposal.TailCall Threads = WasmEdge.Proposal.Threads V128 = WasmEdge.Type.V128 Wasi = WasmEdge.Host.Wasi WasmEdge = WasmEdge.Host.WasmEdge FILE /home/satacker/wasm_work/WasmEdge/bindings/python/WasmEdge.so","title":"AutoGenerated"},{"location":"commands/commands/","text":"Commands run example Takes .wasm path and function name , list of parameters and length of expected return values Python 1 2 3 4 5 6 7 8 9 10 11 12 13 import WasmEdge import os # WasmEdge/bindings/python/example.py wasm_base_path = os . path . abspath ( os . path . join ( __file__ , \"../../..\" )) fib_wasm = os . path . join ( wasm_base_path , \"tools/wasmedge/examples/fibonacci.wasm\" ) log = WasmEdge . Logging () log . debug () vm = WasmEdge . VM () res , l = vm . run ( fib_wasm , 'fib' , [ 10 ], 1 ) print ( l ) C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <wasmedge.h> #include <stdio.h> int main () { /* Create the configure context and add the WASI support. */ /* This step is not necessary unless you need WASI support. */ WasmEdge_ConfigureContext * ConfCxt = WasmEdge_ConfigureCreate (); WasmEdge_ConfigureAddHostRegistration ( ConfCxt , WasmEdge_HostRegistration_Wasi ); /* The configure and store context to the VM creation can be NULL. */ WasmEdge_VMContext * VMCxt = WasmEdge_VMCreate ( ConfCxt , NULL ); /* The parameters and returns arrays. */ WasmEdge_Value Params [ 1 ] = { WasmEdge_ValueGenI32 ( 5 ) }; WasmEdge_Value Returns [ 1 ]; /* Function name. */ WasmEdge_String FuncName = WasmEdge_StringCreateByCString ( \"fib\" ); /* Run the WASM function from file. */ WasmEdge_Result Res = WasmEdge_VMRunWasmFromFile ( VMCxt , \"fibonacci.wasm\" , FuncName , Params , 1 , Returns , 1 ); /* * Developers can run the WASM binary from buffer with the `WasmEdge_VMRunWasmFromBuffer()` API, * or from `WasmEdge_ASTModuleContext` object with the `WasmEdge_VMRunWasmFromASTModule()` API. */ if ( WasmEdge_ResultOK ( Res )) { printf ( \"Get the result: %d \\n \" , WasmEdge_ValueGetI32 ( Returns [ 0 ])); } else { printf ( \"Error message: %s \\n \" , WasmEdge_ResultGetMessage ( Res )); } /* Resources deallocations. */ WasmEdge_VMDelete ( VMCxt ); WasmEdge_ConfigureDelete ( ConfCxt ); WasmEdge_StringDelete ( FuncName ); return 0 ; } Output [ 2021 -10-14 02 :42:27.458 ] [ debug ] Execution succeeded. [ 2021 -10-14 02 :42:27.458 ] [ debug ] ==================== Statistics ==================== Total execution time: 53764 ns Wasm instructions execution time: 53764 ns Host functions execution time: 0 ns Executed wasm instructions count: 1854 Gas costs: 1854 Instructions per second: 34484041 [ '89' ]","title":"Commands"},{"location":"commands/commands/#commands","text":"run example Takes .wasm path and function name , list of parameters and length of expected return values Python 1 2 3 4 5 6 7 8 9 10 11 12 13 import WasmEdge import os # WasmEdge/bindings/python/example.py wasm_base_path = os . path . abspath ( os . path . join ( __file__ , \"../../..\" )) fib_wasm = os . path . join ( wasm_base_path , \"tools/wasmedge/examples/fibonacci.wasm\" ) log = WasmEdge . Logging () log . debug () vm = WasmEdge . VM () res , l = vm . run ( fib_wasm , 'fib' , [ 10 ], 1 ) print ( l ) C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <wasmedge.h> #include <stdio.h> int main () { /* Create the configure context and add the WASI support. */ /* This step is not necessary unless you need WASI support. */ WasmEdge_ConfigureContext * ConfCxt = WasmEdge_ConfigureCreate (); WasmEdge_ConfigureAddHostRegistration ( ConfCxt , WasmEdge_HostRegistration_Wasi ); /* The configure and store context to the VM creation can be NULL. */ WasmEdge_VMContext * VMCxt = WasmEdge_VMCreate ( ConfCxt , NULL ); /* The parameters and returns arrays. */ WasmEdge_Value Params [ 1 ] = { WasmEdge_ValueGenI32 ( 5 ) }; WasmEdge_Value Returns [ 1 ]; /* Function name. */ WasmEdge_String FuncName = WasmEdge_StringCreateByCString ( \"fib\" ); /* Run the WASM function from file. */ WasmEdge_Result Res = WasmEdge_VMRunWasmFromFile ( VMCxt , \"fibonacci.wasm\" , FuncName , Params , 1 , Returns , 1 ); /* * Developers can run the WASM binary from buffer with the `WasmEdge_VMRunWasmFromBuffer()` API, * or from `WasmEdge_ASTModuleContext` object with the `WasmEdge_VMRunWasmFromASTModule()` API. */ if ( WasmEdge_ResultOK ( Res )) { printf ( \"Get the result: %d \\n \" , WasmEdge_ValueGetI32 ( Returns [ 0 ])); } else { printf ( \"Error message: %s \\n \" , WasmEdge_ResultGetMessage ( Res )); } /* Resources deallocations. */ WasmEdge_VMDelete ( VMCxt ); WasmEdge_ConfigureDelete ( ConfCxt ); WasmEdge_StringDelete ( FuncName ); return 0 ; } Output [ 2021 -10-14 02 :42:27.458 ] [ debug ] Execution succeeded. [ 2021 -10-14 02 :42:27.458 ] [ debug ] ==================== Statistics ==================== Total execution time: 53764 ns Wasm instructions execution time: 53764 ns Host functions execution time: 0 ns Executed wasm instructions count: 1854 Gas costs: 1854 Instructions per second: 34484041 [ '89' ]","title":"Commands"},{"location":"development/development/","text":"Development Docs git clone https://github.com/SAtacker/WasmEdge.git cd WasmEdge git checkout pysdk cd bindings/python make virtualenv source .venv/bin/activate make serve","title":"Development"},{"location":"development/development/#development","text":"Docs git clone https://github.com/SAtacker/WasmEdge.git cd WasmEdge git checkout pysdk cd bindings/python make virtualenv source .venv/bin/activate make serve","title":"Development"}]}