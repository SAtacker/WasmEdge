{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Py SDK for WasmEdge Work in progress Motivation Python is a well-known programming language and supports quick development for a variety of domains. WasmEdge has a go language SDK implemented here . This proposal aims to implement a Python ( for the CPython implementation of Python ) SDK using the above implementation as a reference, Details Some rationale around performance- Python has never been intended for performance-critical applications while on the other hand, WasmEdge has different intentions. It is designed to be a lightweight and fast VM for Wasm. The idea behind python is that developers spend more time reading the code. Python SDK should be way easier to use. And as far as performance is considered, all of the code behind this package can be wrapped around the C-API to make it as closer to the native speed as possible. This SDK should be able to provide all the functions present in the C - API of WasmEdge (link given in the appendix). Stuff to look out for: Data-types integrations for all the three python-c-wasm. Safety (no memory access of host from .wasm modules) Potentially it is also possible to wrap around WasmEdge functionalities to support Wasm C API if it doesn't already. The end goal should be to use WasmEdge as a backend and provide an Easy to use SDK over this. Appendix C - API for WasmEdge is already present. - Docs C - API for the CPython implementation of python is quite mature without third-party tools and Boost.Python is also available Examples Misc: I'll probably need help in this to make it as correct as possible if anything seems a bit off. Thanks a lot already :-D Project layout . \u251c\u2500\u2500 Containerfile \u251c\u2500\u2500 coverage.xml \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocks.yml \u251c\u2500\u2500 pywasmedge \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 WasmEdge.h \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 WasmEdge.c \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements-test.txt \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_base.py \u251c\u2500\u2500 VERSION","title":"Home"},{"location":"#welcome-to-py-sdk-for-wasmedge","text":"Work in progress","title":"Welcome to Py SDK for WasmEdge"},{"location":"#motivation","text":"Python is a well-known programming language and supports quick development for a variety of domains. WasmEdge has a go language SDK implemented here . This proposal aims to implement a Python ( for the CPython implementation of Python ) SDK using the above implementation as a reference,","title":"Motivation"},{"location":"#details","text":"Some rationale around performance- Python has never been intended for performance-critical applications while on the other hand, WasmEdge has different intentions. It is designed to be a lightweight and fast VM for Wasm. The idea behind python is that developers spend more time reading the code. Python SDK should be way easier to use. And as far as performance is considered, all of the code behind this package can be wrapped around the C-API to make it as closer to the native speed as possible. This SDK should be able to provide all the functions present in the C - API of WasmEdge (link given in the appendix). Stuff to look out for: Data-types integrations for all the three python-c-wasm. Safety (no memory access of host from .wasm modules) Potentially it is also possible to wrap around WasmEdge functionalities to support Wasm C API if it doesn't already. The end goal should be to use WasmEdge as a backend and provide an Easy to use SDK over this.","title":"Details"},{"location":"#appendix","text":"C - API for WasmEdge is already present. - Docs C - API for the CPython implementation of python is quite mature without third-party tools and Boost.Python is also available Examples","title":"Appendix"},{"location":"#misc","text":"I'll probably need help in this to make it as correct as possible if anything seems a bit off. Thanks a lot already :-D","title":"Misc:"},{"location":"#project-layout","text":". \u251c\u2500\u2500 Containerfile \u251c\u2500\u2500 coverage.xml \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocks.yml \u251c\u2500\u2500 pywasmedge \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 WasmEdge.h \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 WasmEdge.c \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements-test.txt \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_base.py \u251c\u2500\u2500 VERSION","title":"Project layout"},{"location":"commands/commands/","text":"Commands py_run example Takes .wasm path and function name Python 1 2 3 4 5 6 7 8 9 10 11 12 import WasmEdge as we import os wasm_base_path = os . path . abspath ( os . path . join ( __file__ , \"../../../..\" )) fib_wasm = os . path . join ( wasm_base_path , \"tools/wasmedge/examples/fibonacci.wasm\" ) print ( WasmEdge . py_run ( fib_wasm , \"fib\" , )) C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <wasmedge.h> #include <stdio.h> int main () { /* Create the configure context and add the WASI support. */ /* This step is not necessary unless you need WASI support. */ WasmEdge_ConfigureContext * ConfCxt = WasmEdge_ConfigureCreate (); WasmEdge_ConfigureAddHostRegistration ( ConfCxt , WasmEdge_HostRegistration_Wasi ); /* The configure and store context to the VM creation can be NULL. */ WasmEdge_VMContext * VMCxt = WasmEdge_VMCreate ( ConfCxt , NULL ); /* The parameters and returns arrays. */ WasmEdge_Value Params [ 1 ] = { WasmEdge_ValueGenI32 ( 5 ) }; WasmEdge_Value Returns [ 1 ]; /* Function name. */ WasmEdge_String FuncName = WasmEdge_StringCreateByCString ( \"fib\" ); /* Run the WASM function from file. */ WasmEdge_Result Res = WasmEdge_VMRunWasmFromFile ( VMCxt , \"fibonacci.wasm\" , FuncName , Params , 1 , Returns , 1 ); /* * Developers can run the WASM binary from buffer with the `WasmEdge_VMRunWasmFromBuffer()` API, * or from `WasmEdge_ASTModuleContext` object with the `WasmEdge_VMRunWasmFromASTModule()` API. */ if ( WasmEdge_ResultOK ( Res )) { printf ( \"Get the result: %d \\n \" , WasmEdge_ValueGetI32 ( Returns [ 0 ])); } else { printf ( \"Error message: %s \\n \" , WasmEdge_ResultGetMessage ( Res )); } /* Resources deallocations. */ WasmEdge_VMDelete ( VMCxt ); WasmEdge_ConfigureDelete ( ConfCxt ); WasmEdge_StringDelete ( FuncName ); return 0 ; }","title":"Commands"},{"location":"commands/commands/#commands","text":"py_run example Takes .wasm path and function name Python 1 2 3 4 5 6 7 8 9 10 11 12 import WasmEdge as we import os wasm_base_path = os . path . abspath ( os . path . join ( __file__ , \"../../../..\" )) fib_wasm = os . path . join ( wasm_base_path , \"tools/wasmedge/examples/fibonacci.wasm\" ) print ( WasmEdge . py_run ( fib_wasm , \"fib\" , )) C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <wasmedge.h> #include <stdio.h> int main () { /* Create the configure context and add the WASI support. */ /* This step is not necessary unless you need WASI support. */ WasmEdge_ConfigureContext * ConfCxt = WasmEdge_ConfigureCreate (); WasmEdge_ConfigureAddHostRegistration ( ConfCxt , WasmEdge_HostRegistration_Wasi ); /* The configure and store context to the VM creation can be NULL. */ WasmEdge_VMContext * VMCxt = WasmEdge_VMCreate ( ConfCxt , NULL ); /* The parameters and returns arrays. */ WasmEdge_Value Params [ 1 ] = { WasmEdge_ValueGenI32 ( 5 ) }; WasmEdge_Value Returns [ 1 ]; /* Function name. */ WasmEdge_String FuncName = WasmEdge_StringCreateByCString ( \"fib\" ); /* Run the WASM function from file. */ WasmEdge_Result Res = WasmEdge_VMRunWasmFromFile ( VMCxt , \"fibonacci.wasm\" , FuncName , Params , 1 , Returns , 1 ); /* * Developers can run the WASM binary from buffer with the `WasmEdge_VMRunWasmFromBuffer()` API, * or from `WasmEdge_ASTModuleContext` object with the `WasmEdge_VMRunWasmFromASTModule()` API. */ if ( WasmEdge_ResultOK ( Res )) { printf ( \"Get the result: %d \\n \" , WasmEdge_ValueGetI32 ( Returns [ 0 ])); } else { printf ( \"Error message: %s \\n \" , WasmEdge_ResultGetMessage ( Res )); } /* Resources deallocations. */ WasmEdge_VMDelete ( VMCxt ); WasmEdge_ConfigureDelete ( ConfCxt ); WasmEdge_StringDelete ( FuncName ); return 0 ; }","title":"Commands"},{"location":"development/development/","text":"Development Docs cd bindings/python make virtualenv source .venv/bin/activate make serve","title":"Development"},{"location":"development/development/#development","text":"Docs cd bindings/python make virtualenv source .venv/bin/activate make serve","title":"Development"}]}